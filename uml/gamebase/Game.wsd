@startuml GameBaseGame

package game {
    class Main
    class MainBuilder
    package ga_input {
        class ExtendInput {
            +K : Enum<number>
            +ARROW : Enum<number>
            +isAnyKeyPress() : bool
            +isAnyKeyPressed() : bool
            +isYesPress() : bool
            +isYesPressed() : bool
            +isNoPress() : bool
            +isNoPressed() : bool
            +isSubPress() : bool
            +isSubPressed() : bool
            +isUpPress() : bool
            +isUpPressed() : bool
            +isDownPress() : bool
            +isDownPressed() : bool
            +isLeftPress() : bool
            +isLeftPressed() : bool
            +isRightPress() : bool
            +isRightPressed() : bool
        }
    }
    package ga_layer {
        class DebugLayer {
            #deltaTime : number
            #collisions : number
            #playerCollisions : number
            #stage : Stage
            #player : Player
            #count : number
            #recode : Array<Object>
        }
        class UILayer {
            #player : Player
            #playerHP : number
            #animationCount : number
            #animationFrame : number
            #animationState : number
            #uiImage : number
        }
    }
    package ga_scene {
        class TitleScene {
            -title_ : number
        }
        class GameScene {
            #stage : Stage
            #player : Player
            #gameover : bool
        }
    }
}

package base {
    abstract Scene
    abstract Layer
}

package extend {
    class UnderEngineBuilder
    class LayerBaseScene
    class GameoverLayer
    class AllInput
    class Player
    class PlayerGameoverStateAI
    class RoundRectangleCollider
    class UnderStageParser
    class ImpulseBasedResponse
    class SplitManagementStage
    class SequentialWorld
}

Main ..> MainBuilder : Generate
Main ..> TitleScene : Generate
MainBuilder ..> ExtendInput : Generate

TitleScene ..> GameScene : Generate
GameScene ..> UnderStageParser : Generate
GameScene ..> DebugLayer : Generate
GameScene ..> UILayer : Generate
GameScene ..> GameoverLayer : Generate
GameScene ..> Player : Pass to another class, transtate gameover state
GameScene ..> PlayerGameoverStateAI : Generate
GameScene ..> RoundRectangleCollider : Generate
GameScene ..> TitleScene : Generate
GameScene ..> MultiNamedAnimation : Set other
GameScene ..> SingleAnimation : Set other

DebugLayer ..> Player : Get player information
DebugLayer ..> ImpulseBasedResponse : Get physical state
DebugLayer ..> SplitManagementStage : Get stage information
DebugLayer ..> SequentialWorld : Get physical information

UILayer ..> MultiNamedAnimation : Use

MainBuilder --|> UnderEngineBuilder
ExtendInput --|> AllInput
TitleScene ..|> Scene
GameScene --|> LayerBaseScene
DebugLayer ..|> Layer
UILayer ..|> Layer

@enduml
