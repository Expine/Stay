@startuml UnderEngine

package under {
    package base {
        abstract EngineBuilder {
            {abstract} #makeEngine() : Engine
            {abstract} #makeInput() : Input
            {abstract} #makeContext() : Context
            {abstract} #makeMusic() : Music
            {abstract} #makeSceneManager() : SceneManager
            +build() : Engine
        }
        abstract Engine {
            #input : Input
            #screen : Screen
            #manager : SceneManager
            #context : Context
            #music : Music
            +setInput(input)
            +setScreen(screen)
            +setContext(context)
            +setSceneManager(manager)
            +setMusic(music)
            +execute(scene)
            {abstract} #main()
        }

        package input {
            abstract Input {
                {static} +it : Input /' Singleton '/
                #screen : Screen
                #target : Element
                +setScreen(screen)
                {abstract} #onMouseMove(mouseEvent)
                {abstract} #onMouseDown(mouseEvent)
                {abstract} #onMouseUp(mouseEvent)
                {abstract} #onKeyDown(keyEvent)
                {abstract} #onKeyUp(keyEvent)
                {abstract} #clear()
                {abstract} +update()
                {abstract} +getMouseX() : number
                {abstract} +getMouseY() : number
                {abstract} +isMousePress(code) : bool
                {abstract} +isMousePressed(code) : bool
                {abstract} +isKeyPress(code) : bool
                {abstract} +isKeyPressed(code) : bool
            }
        }

        package screen {
            abstract Screen {
                +Screen(width, height) : Screen
                {static} +it : Screen /' Singleton '/
                +gameSize : number
                +width : number
                +height : number
                {abstract} +getTarget() : Element
                {abstract} +getCanvas() : Canvas
            }
        }

        package music {
            abstract Music {
                {static} +it : Music /' Singleton '/
                {abstract} +loadMusic(filePath) : number
                {abstract} +unloadMusic(musicID)
                {abstract} +playSE(musicID)
                {abstract} +playBGM(musicID)
                {abstract} +pauseBGM()
                {abstract} +resumeBGM()
                {abstract} +stopBGM()
            }
        }

        package context {
            abstract Context {
                #screen : Screen
                #image : ContextImage
                +setScreen(screen)
                {abstract} +setContextImage(contextImage)
                {abstract} +setFontColorByame(colorName)
                {abstract} +setFontColorByRGB(r,g,b)
                {abstract} +setFontSize(size)
                {abstract} +setFontName(fontName)
                {abstract} +preRendering()
                {abstract} +postRendering()
                {abstract} +fillText(text,x,y,anchorX,anchorY,size,color,font)
                {abstract} +strokeLine(sx,sy,ex,ey,color,lineWidth)
                {abstract} +strokeCircle(x,y,radius,startAngle,endAngle,anticlockwise,color,lineWidth)
                {abstract} +strokeRect(x,y,width,height,color,lineWidth)
                {abstract} +drawImage(imageID,x,y,width,height,srcX,srcY,srcW,srcH)
            }
            abstract ContextImage {
                {static} +it : ContextImage /' Singleton '/
                {abstract} +loadImage(filePath) : number
                {abstract} +getImage(id) : Image
            }
        }

        package scene {
            abstract SceneManager {
                {static} +it : SceneManager /' Singleton '/
                {abstract} +getScene() : Scene
                {abstract} +pushScene(scene)
                {abstract} +popScene()
                {abstract} +replaceScene(scene)
                {abstract} +update(dt)
                {abstract} +render(ctx)
            }
            abstract Scene {
                {abstract} +init()
                {abstract} +update(dt)
                {abstract} +render(ctx)
            }
        }

        package layer {
            abstract Layer {
                {abstract} +update(dt)
                {abstract} +render(ctx)
            }
        }

        package stage {
            abstract Stage {
                #map : Map
                #camera : Camera
                #physic : PhysicalWorld
                +setMap(map)
                +setCamera(camera)
                +setPhysicalWorld(physic)
                {abstract} +addEntity(entity)
                {abstract} +removeEntity(entity)
                {abstract} +setEnable(enable)
                {abstract} +update(dt)
                {abstract} +render(ctx,shiftX,shiftY)
            }
            package parser {
                abstract StageParser {
                    {abstract} +parse(filePath,width,height) : Stage
                }
            }
            package map {
                abstract Map {
                    +Map(width,height) : Map
                    +width : number
                    +height : number
                    {abstract} +update(dt)
                    {abstract} +render(ctx,shiftX,shiftY)
                }
            }
            package camera {
                abstract Camera {
                    +Camera(screenWidth,screenHeight) : Camera
                    +cameraX : number
                    +cameraY : number
                    +screenWidth : number
                    +screenHeight : number
                    +setCameraPosition(x,y,width,height)
                }
            }
            package entity {
                abstract Entity {
                    +Entity(x,y,width,height,imageID)
                    +x : number
                    +y : number
                    +width : number
                    +height : number
                    #imageID : number
                    +directionX : number
                    +directionY : number
                    +stage : Stage
                    +collider : Collider
                    +material : Material
                    +setStage(stage)
                    +setCollider(collider)
                    +setMaterial(material)
                    {abstract} +update(dt)
                    {abstract} +render(ctx,shiftX,shiftY)
                }
                abstract ImmutableObject {

                }
                abstract MutableObject {
                    +body : RigidBody
                    +setRigidBody(body)
                    +deltaMove(dx,dy)
                }
                abstract AutonomyObject {
                    {abstract} +addAI(ai,priotiy)
                    {abstract} +removeAI(ai)
                }

                abstract BreakableObject {
                    {abstract} +getHP() : number
                    {abstract} +damage(damage)
                    {abstract} +destroy()
                }
            }
            package physics {
                abstract PhysicalWorld {
                    +PhysicalWorld(gravity) : PhysicalWorld
                    #gravity : number
                    #response : CollisionResponse
                    +setResponse(response)
                    {abstract} +addActor(actor)
                    {abstract} +addEntity(entity)
                    {abstract} +removeEntity(entity)
                    {abstract} +update(dt)
                }
                abstract CollisionResponse {
                    +collisionResponse(data,dt)
                }
                package collider {
                    abstract Collider {
                        #aabb : AABB
                        +collisions : Array<CollisionData>
                        +isResponse : bool
                        +enable : bool
                        #entity : Entity
                        +init()
                        +setEntity(entity)
                        +addCollision(collision)
                        +getAABB() : AABB
                        {abstract} +isInCollider(x,y) : bool
                        {abstract} +isCollision(collider,data)
                        +isCollisionRoughly(collider)
                        {abstract} +update()
                        {abstract} +render(ctx,shiftX,shiftY)
                    }
                    class AABB {
                        +startX : number
                        +startY : number
                        +endX : number
                        +endY : number
                    }
                    class CollisionData {
                        +CollisionData(e1,e2,nx,ny,depth) : CollisionData
                        +e1 : Entity
                        +e2 : Entity
                        +nx : number
                        +ny : number
                        +depth : number
                    }
                }
                package material {
                    abstract Material {
                        +Material(mass,elasticity,mu) : Material
                        +mass : number
                        +e : number
                        +mu : number
                    }
                }
                package body {
                    abstract RigidBody {
                        #velocityX : number
                        #velocityY : number
                        #accelerationX : number
                        #accelerationY : number
                        +preVelocityX : number
                        +preVelocityY : number
                        +preAccelerationX : number
                        +preAccelerationY : number
                        +k : number
                        #entity : Entity
                        +setEntity(entity)
                        {abstract} +setNextAddVelocity(vx,vy)
                        {abstract} +update(dt)
                    }
                }
            }
            package ai {
                abstract AI {
                    #entity : AutonomyObject
                    +setEntity(entity)
                    {abstract} +init()
                    {abstract} +apply(dt) : bool
                }
                abstract StateAI {
                    {abstract} +getState() : State
                    {abstract} +changeState(state)
                }
                abstract State {
                    #entity : AutonomyObject
                    #ai : StateAI
                    +setEntity(entity)
                    +setAI(ai)
                    {abstract} +init()
                    {abstract} +apply(dt) : bool
                    {abstract} +render(ctx.shiftX,shiftY)
                }
            }
        }
    }
}

EngineBuilder ..> Engine
Engine "1" *-- "1" Screen
Engine "1" *-- "1" Input
Engine "1" *-- "1" SceneManager
Engine "1" *-- "1" Context
Engine "1" *-- "1" Music

Input .> Screen
Context .> Screen

SceneManager "1" *-- "*" Scene
Scene "1" o-- "*" Layer
Context "1" *-- "1" ContextImage

StageParser --> Stage
Stage "1" *-- "1" Map
Stage "1" *-- "1" Camera
Stage "1" *-- "*" Entity
Stage "1" *-- "1" PhysicalWorld
PhysicalWorld "1"*--"*" Entity

Entity <|-- ImmutableObject
Entity <|-- MutableObject
MutableObject <|-- AutonomyObject
AutonomyObject <|-- BreakableObject

Entity "1" o-- "1" Collider
Entity "1" o-- "1" Material
RigidBody "1" --* "1" MutableObject
AutonomyObject "1" *-- "*" AI
AI <|-- StateAI
StateAI "1"*--"1" State

PhysicalWorld "1" *-- "1" CollisionResponse
Collider "1" o-- "*" CollisionData
Collider "1" *-- "1" AABB

package extend {
    class UnderEngineBuilder {

    }

    class UnderEngine {
        -oldTime : number
        -render_ : lambda
    }
    package ex_input {
        class AllInput {
            -mouseX_
            -mouseY_
            -STATE : Enum<number>
            #inputMouse : Array<number>
            #inputKey : Array<number>
            +M : Enum<number>
        }
    }
    package ex_screen {
        class GeneratableScreen {
            +GeneratableScreen(width,height) : GeneratableScreen
            #canvas : Canvas
        }
        class ScalableScreen {
            +ScalableScreen(width,height) : ScalableScreen
        }
    }

    package ex_context {
        class JSContext {
            -fontColor_ : string
            -fontSize_ : number
            -fontName_ : string
            -lineColor_ : string
            -lineWidth_ : number
            -ctx_ : CanvasRenderingContext2D
        }
        class GLContext {
            -gl_ : WebGLRenderingContext
        }
        class CachedImage {
            -images : Array<Image>
            -caches : Dictionary<string, number>
        }
    }

    package ex_music {
        class XHTMLMusic {
            -music_ : Array<BufferSource>
            -bgmList_ : Array<number>
            -context_ : AudioContext
        }
    }

    package ex_scene {
        class StackSceneManager {
            -scenes_ : Array<Scene>
        }
        class DefaultTitleScene {
            -r_ : number
            -angle_ : number
        }
    }

    package ex_layer {
        class GameoverLayer {

        }
    }

    package ex_stage {
        class CSVStageParser {
            #makeBaseStage() : Stage
            #makeBaseMap(imageID,width,height) : Map
            #makeBaseCamera(width,height) : Camera
            #makeBaseWorld() : PhysicalWorld
            #makeTileobject(verticalId,horizontalId,tileWidth,tileHeight,x,y,width,height,imageID) : TileObject
        }
        class JSONStageParser {
            #makeBaseStage() : Stage
            #makeBaseMap(map) : Map
            #makeBaseCamera(camera,width,height) : Camera
            #makeBaseWorld() : PhysicalWorld
            #makeTileobject(tile,chip) : TileObject
        }
        class SplitManagementStage {
            -mutables_ : Array<MutableObject>
            -entities_ : Array<Entity>
            -player_ : Player
            -enable_ : bool
        }
        package ex_map {
            class InvariantBackMap {
                +InvariantBackMap(imageID,width,height)
                -backID_ : number
            }
            class SequentialMap {
                -maps_ : Array<Map>
            }
        }
        package camera {
            class CenterCamera {

            }
        }
        package ex_entity {
            class TileObject {
                #srcX : number
                #srcY : number
                #srcW : number
                #srcH : number
            }
            class Obstacle {

            }
            class SingleAIObject {
                #ai : Array<AI>
                #hp : number
            }
            class StateCharacter {
                #state : State
            }
            class Enemy {

            }
            class Player {
                -invincible_ : number
            }

            package ex_attack {
                abstract AttackObject {
                    #lifespan : number
                    {abstract} #judgeCollision : bool
                }
                class PunchObject {

                }
            }
        }
        package ex_physics {
            class SequentialWorld {
                #collisions : Array<CollisionData>
                #collisionSize : number
                #actors : Array<Entity>
                #entities : Array<Entity>
            }
            class ImpulseBasedResponse {

            }
            class RepulsionResponse {

            }
            class CircleCollider {
                #radius : number
                #shiftX : number
                #shiftY : number
                #centerX : number
                #centerY : number
            }
            class RectangleCollider {
                #startX : number
                #startY : number
                #endX : number
                #endY : number
            }
            class RoundRectangleCollider {
                #cut : number
            }
            class MaxAdoptBody {
                #vpx : number
                #vpy : number
                #vmx : number
                #vmy : number
            }
            class DefaultMaterial {

            }
        }
        package ex_ai {
            class BaseStateAI {

            }
            class StraightAI {
                #maxVelocityX : number
                #walkPower : number
            }

            class EnemyAI {

            }

            package ex_player {
                class PStationaryState {
                    #maxVelocityX : number
                    #walkPower : number
                    #makeWalkState() : State
                    #makeJumpState() : State
                    #makeAttackState() : State
                }
                class PWalkState {
                    -walkCount_ : number
                    #maxVelocityX : number
                    #walkPower : number
                    #makeStationaryState() : State
                    #makeJumpState() : State
                    #makeAttackState() : State
                }
                class PJumpState {
                    -jumpCount_ : number
                    -inAirCount_ : number
                    -jumpPower_ : number
                    #makeStationaryState() : State
                    #makeJumpingState() : State
                }
                class PJumpingState {
                    #makeStationaryState() : State
                    #makeWalkState() : State
                }
                class PPunchState {
                    #makeStationaryState() : State
                    #makeWalkState() : State
                    #makeAttackObject() : AttackObject
                }
                class PGameoverState {

                }
                class PlayerBaseStateAI {

                }
            }
        }
    }

    package ex_util {
        class Util {
            {static} +onGround(entity) : bool
            {static} +getUnderEntity(entity) : Entity
            {static} +getCollidedEntity(self,data) : Entity
        }
    }
}

UnderEngineBuilder ..> UnderEngine
UnderEngineBuilder ..> AllInput
UnderEngineBuilder ..> ScalableScreen
UnderEngineBuilder ..> JSContext
UnderEngineBuilder ..> CachedImage
UnderEngineBuilder ..> XHTMLMusic
UnderEngineBuilder ..> StackSceneManager
UnderEngine ..> Input
UnderEngine ..> SceneManager
UnderEngine ..> Context

AllInput ..> Screen
JSContext ..> Screen
GLContext ..> Screen
StackSceneManager ..> Scene
GameoverLayer ..> Context

CSVStageParser --> SplitManagementStage
CSVStageParser --> CenterCamera
CSVStageParser --> InvariantBackMap
CSVStageParser --> SequentialWorld
CSVStageParser --> Repulsion
CSVStageParser --> TileObject
CSVStageParser --> RectangleCollider
CSVStageParser --> DefaultMaterial
JSONStageParser --> SplitManagementStage
JSONStageParser --> CenterCamera
JSONStageParser --> SequentialMap
JSONStageParser --> InvariantBackMap
JSONStageParser --> SequentialWorld
JSONStageParser --> Repulsion
JSONStageParser --> TileObject
JSONStageParser --> RectangleCollider
JSONStageParser --> CircleCollider
JSONStageParser --> RoundRectangleCollider
JSONStageParser --> DefaultMaterial

InvariantBackMap ..> Context
SequentialMap ..> Map

SplitManagementStage "1" o-- MutableObject
SplitManagementStage "1" *-- "1" Player

TileObject ..> Context
Obstacle ..> Context
SingleAIObject ..> AI
SingleAIObject ..> Context
SingleAIObject ..> Stage
AttackObject ..> Collider
' Should be fixed
PunchObject ..> RectangleCollider

BaseStateAI ..> State
PlayerBaseStateAI ..> PStationaryState

UnderEngineBuilder ..|> EngineBuilder
UnderEngine ..|> Engine
AllInput ..|> Input
ExtendedInput ..|> AllInput
GeneratableScreen ..|> Screen
ScalableScreen --|> GeneratableScreen

JSContext ..|> Context
GLContext ..|> Context
CachedImage ..|> ContextImage

DefaultTitleScene ..|> Scene
StackSceneManager ..|> SceneManager

CSVStageParser ..|> StageParser
JSONStageParser ..|> StageParser
SplitManagementStage ..|> Stage
InvariantBackMap ..|> Map
SequentialMap ..|> Map

TileObject ..|> ImmutableObject
Obstacle ..|> MutableObject
SingleAIObject ..|> BreakableObject
StateCharacter --|> SingleAIObject
Player --|> StateCharacter
Enemy --|> SingleAIObject
AttackObject --|> SingleAIObject
PunchObject ..|> AttackObject

SequentialWorld "1"o--"*"CollisionData

RoundRectangleCollider --|> RectangleCollider

BaseStateAI ..|> StateAI
EnemyAI --|> StraightAI

PStationaryState ..|> State
PWalkState ..|> State
PJumpState ..|> State
PJumpingState ..|> State
PPunchState ..|> State
PGameoverState ..|> State

package game {
    class Main {

    }

    package ga_input {
        class ExtendedInput {
            +K : Enum<number>
            +ARROW : Enum<number>
            +isAnyKeyPress() : bool
            +isAnyKeyPressed() : bool
            +isYesPress() : bool
            +isYesPressed() : bool
            +isNoPress() : bool
            +isNoPressed() : bool
            +isSubPress() : bool
            +isSubPressed() : bool
            +isUpPress() : bool
            +isUpPressed() : bool
            +isDownPress() : bool
            +isDownPressed() : bool
            +isLeftPress() : bool
            +isLeftPressed() : bool
            +isRightPress() : bool
            +isRightPressed() : bool
        }
    }
    package ga_layer {
        class DebugLayer {
            #deltaTime : number
            #collisions : number
            #player : number
            #stage : Stage
            #count : number
            #recode : Array<Object>
        }
        class UILayer {
            #player : Player
            #playerHP : number
            #animationCount : number
            #animationFrame : number
            #animationState : number
            #uiImage : number
        }
    }
    package ga_scene {
        class TitleScene {
            -title_ : number
        }
        class GameScene {
            #stage : Stage
            #player : Player
            #debug : DebugLayer
            #ui : UILayer
            #gameover : GameoverLayer
        }
    }
    package ga_stage {
        class UnderStagePaser {

        }

        package ga_entity {
            class UnderPlayer {
                #aiType : AI
                +changeType(ground)
            }
            class UnderTileObject {
                +getGlobalID() : number
            }
        }

        package ga_ai {
            package ga_player {
                class PUnderState {
                    -underCount_ : number
                }
                class UnderStateAI {

                }
                package ga_wild {
                    class WildStationaryState {
                    }
                    class WildWalkState {
                    }
                    class WildJumpState {
                    }
                    class WildJumpingState {
                    }
                    class WildClawState {
                    }
                    class WildBaseStateAI {
                    }
                }
            }
        }
    }
}

Main ..> UnderEngineBuilder
Main ..> Engine

@enduml
